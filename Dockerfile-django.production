# Production Dockerfile for Django app

FROM python:3.8-alpine as base

ENV DJANGO_PRODUCTION_MODE 1
ENV DJANGO_DEBUG 0
ENV PYTHONPYCACHEPREFIX /.pycache

# Let all *.pyc files stay within the container, for Python >= 3.8
RUN mkdir -p $PYTHONPYCACHEPREFIX

# Create a directory for the logs
RUN mkdir -p /var/log/df_20210326

COPY ./wait-for-it.sh /usr/bin/

# Install bash, libpq, libjpeg-turbo and gettext
# Bash is required to support `wait-for-it.sh` script, should not add too much to docker image
RUN apk add --no-cache bash gettext libpq libjpeg-turbo

# Install build dependencies and mark them as virtual packages so they could be removed together
RUN apk add --no-cache --virtual .build-deps \
    ca-certificates alpine-sdk postgresql-dev python3-dev linux-headers musl-dev \
    libffi-dev libxml2-dev libxslt-dev jpeg-dev zlib-dev rust cargo

ENV POETRY_HOME "$HOME/.poetry"
ENV POETRY_NO_INTERACTION 1
ENV POETRY_VIRTUALENVS_CREATE 0
ENV PATH="$POETRY_HOME/bin:$PATH"

RUN wget https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py && \
    python3 get-poetry.py

COPY pyproject.toml /
COPY poetry.lock /

# Install all non-dev dependencies from poetry.lock
RUN poetry install --no-dev

# Find all file objects containing name `test` or compiled python files and remove them
# Find all runtime dependencies that are marked as needed by scanelf
# scanelf is utility to show ELF data for binary objects
# For more info: https://wiki.gentoo.org/wiki/Hardened/PaX_Utilities#The_scanelf_application
# Finally re-install missing run-dependencies
RUN find /usr/local \
        \( -type d -a -name test -o -name tests \) \
        -o \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
        -exec rm -rf '{}' + \
  && runDeps="$( \
        scanelf --needed --nobanner --recursive /usr/local \
                | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
                | sort -u \
                | xargs -r apk info --installed \
                | sort -u \
    )" \
  && apk add --virtual .rundeps $runDeps

# Remove build dependencies
RUN apk del .build-deps

# Copy code
COPY ./df_20210326 /app

# Set the default directory where CMD will execute
WORKDIR /app

# Compile translations to .mo files
RUN DJANGO_DOCKER_BUILD=True python manage.py compilemessages

# Run Gunicorn by default
CMD gunicorn df_20210326.wsgi:application --workers 2 --bind :80
